What happens when you initialize a repository? Why do you need to do it?

	It adds a hidden .git file with kind of boiler-plate empty files ready to start storing your versions and commits. If you don't initialize the repository, you just have a directory and no way to commit to it.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	It's a temporary folder to organize your commits without commiting to them.

How can you use the staging area to make sure you have one commit per logical change?

	You can use it by isolating what you're going to commit. You can also use it by comparing the change to what's in the repo.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches would help when you know a PM will want to revert feature updates.

How do the diagrams help you visualize the branch structure?

	They help me see how each commit is related to the others in time (did it come before or after another commit) and lineage (does it have the same parent/come from the same branch)

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	THe final outcome of things added or deleted from the shared parent is marged together into one branch. The new merged branch has two parents so we show the merged branch pointing to the two branches.

